services:
  #database section

  #orderdb: sql server
  orderdb:
    container_name: orderdb
    environment:
      SA_PASSWORD: "Passw0rd!"
      ACCEPT_EULA: "Y"
    restart: always
    volumes:
      - order_data:/var/lib/sqlserver/data
    ports:
      - "1435:1433"

  #productdb: mysql
  productdb:
    container_name: productdb
    environment:
      - MYSQL_ROOT_PASSWORD=rootpasswd
      - MYSQL_DATABASE=ProductDB
      - MYSQL_USER=user
      - MYSQL_PASSWORD=userpasswd
    restart: always
    volumes:
      - product_data:/var/lib/mysql
    ports:
      - "3307:3306"

  #customerdb: postgres
  customerdb:
    container_name: customerdb
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin1234
      - POSTGRES_DB=CustomerDB
    restart: always
    volumes:
      - customer_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
 
  #basketdb: redis
  basketdb:
    container_name: basketdb
    restart: always
    ports:
      - "6379:6379"
   
  #inventorydb: mongo
  inventorydb:
    container_name: inventorydb
    restart: always
    volumes:
      - inventory_data:/data/db
    ports:
      - "27017:27017"
 


  #infrastructure section

  rabbitmq:
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672" 

  pgadmin:
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=nice231096@gmail.com
      - PGADMIN_DEFAULT_PASSWORD=admin1234
    restart: always
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/root/.pgadmin

  portainer:
    container_name: portainer
    restart: always
    ports:
      - "8080:8000"
      - "9001:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
 
  elasticsearch:
    container_name: elasticsearch
    environment: 
      - xpack.monitoring.enabled=true
      - xpack.watcher.enabled=false
      - discovery.type=single-node
    ports:
      - "9300:9200"
      - "9000:9000"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  kibana:
    container_name: kibana
    environment: 
      - ELASTICSEARCH_URL=http://elasticsearch:9300
    depends_on:
      - elasticsearch
    ports:
      - "9200:9200"
      - "5601:5601"


  #microservices api sections
  product.api:
    container_name: product.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "ConnectionStrings:DefaultConnectionString=Server=productdb;Port=3306;Database=ProductDB;Uid=root;Pwd=rootpasswd"
    depends_on:
      - productdb
    ports:
      - "6002:80"
    restart: always

  customer.api:
    container_name: customer.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "ConnectionStrings:DefaultConnectionString=Server=customerdb;Port=5432;Database=CustomerDB;Uid=admin;Pwd=admin1234"
    depends_on:
      - customerdb
    ports:
      - "6003:80"
    restart: always

  basket.api:
    container_name: basket.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "CacheSettings:ConnectionString=basketdb:6379"
      - "EventBusSettings:HostAddress=amqp://guest:guest@rabbitmq:5672"
    depends_on:
      - basketdb
      - rabbitmq
    ports:
      - "6004:80"
    restart: always

  ordering.api:
    container_name: ordering.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "ConnectionStrings:DefaultConnectionString=Server=orderdb;Database=OrderDB;User Id=sa;Password=Passw0rd!;Encrypt=False;TrustServerCertificate=True;Multipleactiveresultsets=true"
      - "EventBusSettings:HostAddress=amqp://guest:guest@rabbitmq:5672"
    depends_on:
      - orderdb
      - rabbitmq
    ports:
      - "6005:80"
    restart: always